{
    "view": "layouts.default",
    "path": "/",
    "title": "Let's get started",
    "description": "Creating a project with SSG takes less than 5 minutes using Composer and Yarn (or npm, pnpm etc.), and your sites are built in milliseconds.",
    "imports": "/data/example.json",
    "sections": [
        {
            "title": "Adding Content",
            "slug": "content",
            "contents": [
                {
                    "type": "text",
                    "text": "SSG process content from inside of the <strong>resources/content</strong> directory. Structure inside of this directory doesn't matter, and isn't mirrored to the compiled site. Instead, a path variable is set in each content item to determine the url of the final page."
                },
                {
                    "type": "text",
                    "text": "You have two options when it comes to content in SSG, <strong>JSON</strong>"
                },
                {
                    "type": "text",
                    "text": "Here's an example of a <strong>JSON</strong> content file for SSG:"
                },
                {
                    "type": "code",
                    "text": "{\n    \"view\": \"layout.blog\",\n    \"path\": \"/blog\",\n    \"title\": \"My mediocre coding blog!\",\n    \"about\": \"Here's where I write everything that I forgot I bookmarked.\"\n}"
                },
                {
                    "type": "text",
                    "text": "When you build your site, all of the keys in the entire JSON file, or the header of the Markdown files, are sent to the Blade template as individual variables."
                },
                {
                    "type": "text",
                    "text": "The template used is specified in the <strong>view</strong> variable (via the structure in your resources directory). The fully-parsed HTML from the Markdown content under the heading area is accessible through a single variable called <strong>$content</strong>."
                }
            ]
        },
        {
            "title": "Modifying Assets",
            "slug": "assets",
            "contents": [
                {
                    "type": "text",
                    "text": "Out of the box, SSG comes pre-installed and pre-configured with Tailwind CSS as the front-end style framework of choice. It's included through the main <strong>app.css</strong> file located in the resources/assets/css directory."
                },
                {
                    "type": "text",
                    "text": "If you would like to make any additions or changes to the framework used (e.g. you prefer Bootstrap), all you'll need to do is install it through npm and replace the <strong>@tailwind</strong> directives with your framework of choice's includes. Because the entire asset pipeline is run through Vite, it's really easy to make large changes like that."
                },
                {
                    "type": "text",
                    "text": "Additionally, you can change <strong>app.js</strong> file in the resources/assets/js directory. It simply adds scripts globally to your site, feel free to extend functionality as you see."
                },
                {
                    "type": "text",
                    "text": "SSG also leverages Vite's versioning, and thus references a manifest.json file at the <strong>dist</strong> folder. These values are changes with each build, and are injected as an array with the <strong>$vite</strong> variable across all Blade templates. You can see how the CSS files are pulled in using this by checking out the <a class='underline hover:text-gray-900 transition' href='https://github.com/twent/php-ssg/blob/master/resources/views/layouts/default.blade.php'>default layout file</a>, and the JS inside the <a class='underline hover:text-gray-900 transition' href='https://github.com/twent/php-ssg/blob/master/resources/views/partials/footer.blade.php'>footer include</a>."
                }
            ]
        },
        {
            "title": "Building Your Site",
            "slug": "building",
            "contents": [
                {
                    "type": "text",
                    "text": "Once you're ready to compile your assets and build your site, you have three options to choose from. The following command will build <strong>development</strong> assets and compile your site into an HTML folder structure located in the <strong>/dist</strong> folder:"
                },
                {
                    "type": "code",
                    "text": "make build or make"
                }
            ]
        },
        {
            "title": "Deployment",
            "slug": "deployment",
            "contents": [
                {
                    "type": "text",
                    "text": "Once you're done, deployment is super simple. Either upload your entire project to your server of choice and point the webroot at the <strong>/dist</strong> folder, or commit just the files that are in the <strong>/dist</strong> folder themselves and save them to the default server root."
                }
            ]
        }
    ]
}
